package com.temenos.retailonboarding;

/**
 * This class was automatically generated by the data modeler tool.
 */

public class OnboardingScripts implements java.io.Serializable {

	static final long serialVersionUID = 1L;

	public OnboardingScripts() {
	}

	public static void loadApplication(
			org.kie.api.runtime.process.ProcessContext kcontext) {
		String applicationData = (String) kcontext
				.getVariable("applicationData");
		com.google.gson.JsonObject appJson = new com.google.gson.JsonParser()
				.parse(applicationData).getAsJsonObject();
		com.google.gson.JsonObject metaDataObj = appJson.get("MetaData")
				.getAsJsonObject();

		// ApplicationStatus
		String status = metaDataObj.get("Status") != null ? metaDataObj.get(
				"Status").getAsString() : "";
		kcontext.setVariable("applicationStatus", status);

		// BankReference
		String bankReferenceValue = metaDataObj.get("BankReference") != null
				? metaDataObj.get("BankReference").getAsString()
				: "";
		kcontext.setVariable("bankReference", bankReferenceValue);

		// IsDataChanged
		String isDataChangedValue = metaDataObj.get("IsDataChanged") != null
				? metaDataObj.get("IsDataChanged").getAsString()
				: "";
		kcontext.setVariable("isDataChanged", isDataChangedValue);

		// CoApplicantCount
		int coApplicantCountValue = metaDataObj.get("CoApplicantCount") != null
				? metaDataObj.get("CoApplicantCount").getAsInt()
				: 0;
		kcontext.setVariable("coApplicantCount", coApplicantCountValue);

		// ApplicationType
		String applicationType = metaDataObj.get("ApplicationType") != null
				? metaDataObj.get("ApplicationType").getAsString()
				: "";
		kcontext.setVariable("applicationType", applicationType);

		// PrimaryApplicant
		com.google.gson.JsonObject primaryApplicantJSON = metaDataObj.get(
				"PrimaryApplicant").getAsJsonObject();
		String primaryApplicantProfileId = primaryApplicantJSON
				.get("DigitalProfileId") != null ? primaryApplicantJSON.get(
				"DigitalProfileId").getAsString() : "";
		String primaryApplicantExistingCustomer = primaryApplicantJSON
				.get("IsExistingCustomer") != null ? primaryApplicantJSON.get(
				"IsExistingCustomer").getAsString() : "";
		java.util.Map<String, Object> primaryApplicantMap = new java.util.HashMap<String, Object>();
		primaryApplicantMap.put("digitalProfileId", primaryApplicantProfileId);
		primaryApplicantMap.put("isExistingCustomer",
				primaryApplicantExistingCustomer.equals("Yes"));
		kcontext.setVariable("primaryApplicant", primaryApplicantMap);

		// Company
		java.util.Map<String, Object> companyMap = new java.util.HashMap<String, Object>();
		if (metaDataObj.has("Company") && metaDataObj.get("Company") != null) {
			com.google.gson.JsonObject companyJSON = metaDataObj.get("Company")
					.getAsJsonObject();
			String companyProfileId = companyJSON.get("DigitalProfileId") != null
					? companyJSON.get("DigitalProfileId").getAsString()
					: "";
			String companyExistingCustomer = companyJSON
					.get("IsExistingCustomer") != null ? companyJSON.get(
					"IsExistingCustomer").getAsString() : "";
			if (companyProfileId != "")
				companyMap.put("digitalProfileId", companyProfileId);
			if (companyExistingCustomer != "")
				companyMap.put("isExistingCustomer",
						companyExistingCustomer.equals("Yes"));
			kcontext.setVariable("company", companyMap);
		}

		// RelatedCompany
		java.util.Map<String, Object> relatedCompanyMap = new java.util.HashMap<String, Object>();
		if (metaDataObj.has("RelatedCompany")
				&& metaDataObj.get("RelatedCompany") != null) {
			com.google.gson.JsonObject relatedCompanyJSON = metaDataObj.get(
					"RelatedCompany").getAsJsonObject();
			String relatedCompanyProfileId = relatedCompanyJSON
					.get("DigitalProfileId") != null ? relatedCompanyJSON.get(
					"DigitalProfileId").getAsString() : "";
			String relatedCompanyExistingCustomer = relatedCompanyJSON
					.get("IsExistingCustomer") != null ? relatedCompanyJSON
					.get("IsExistingCustomer").getAsString() : "";
			if (relatedCompanyProfileId != "")
				relatedCompanyMap.put("digitalProfileId",
						relatedCompanyProfileId);
			if (relatedCompanyExistingCustomer != "")
				relatedCompanyMap.put("isExistingCustomer",
						relatedCompanyExistingCustomer.equals("Yes"));
			kcontext.setVariable("relatedCompany", relatedCompanyMap);
		}

		// CoApplicants
		java.util.List<java.util.Map<String, Object>> coApplicants = new java.util.ArrayList<java.util.Map<String, Object>>();
		if (coApplicantCountValue > 0 && metaDataObj.has("CoApplicants")) {
			com.google.gson.JsonArray coApplicantsArray = metaDataObj.get(
					"CoApplicants").getAsJsonArray();
			coApplicantsArray
					.forEach(item -> {
						com.google.gson.JsonObject coApplicantEle = (com.google.gson.JsonObject) item;
						String coApplicantProfileId = coApplicantEle
								.get("DigitalProfileId") != null
								? coApplicantEle.get("DigitalProfileId")
										.getAsString() : "";
						String coApplicantExistingCustomer = coApplicantEle
								.get("IsExistingCustomer") != null
								? coApplicantEle.get("IsExistingCustomer")
										.getAsString() : "";
						java.util.Map<String, Object> coApplicantMap = new java.util.HashMap<String, Object>();
						coApplicantMap.put("digitalProfileId",
								coApplicantProfileId);
						coApplicantMap.put("isExistingCustomer",
								coApplicantExistingCustomer.equals("Yes"));
						coApplicants.add(coApplicantMap);
					});
			kcontext.setVariable("coApplicants", coApplicants);
		}

		// combining all applicants
		java.util.List<java.util.Map<String, Object>> applicants = new java.util.ArrayList<java.util.Map<String, Object>>();
		// java.util.Collections.copy(applicants, coApplicants);
		if (companyMap.size() > 0)
			applicants.add(0, companyMap);
		applicants.add(applicants.size(), primaryApplicantMap);
		applicants.addAll(coApplicants);
		if (relatedCompanyMap.size() > 0)
			applicants.add(applicants.size(), relatedCompanyMap);
		kcontext.setVariable("applicants", applicants);

		// productReferences
		com.google.gson.JsonObject productSelectionObj = appJson.get(
				"ProductSelection").getAsJsonObject();
		com.google.gson.JsonArray productsArray = productSelectionObj
				.get("Products") != null ? productSelectionObj.get("Products")
				.getAsJsonArray() : null;
		java.util.List<String> productListItems = new java.util.ArrayList<String>();
		java.util.List<String> productListItemsforCreditCard = new java.util.ArrayList<String>();
		java.util.Map<String, java.util.List<String>> cdPlansMap = new java.util.HashMap<String, java.util.List<String>>();
		if (productsArray != null && productsArray.size() > 0) {
			productsArray
					.forEach(item -> {
						com.google.gson.JsonObject products = (com.google.gson.JsonObject) item;
						if (!products.get("ProductGroupRef").getAsString()
								.equals("CREDIT.CARDS")) {
							productListItems.add(products.get("ProductRef")
									.getAsString());
						} else {
							productListItemsforCreditCard.add(products.get(
									"ProductRef").getAsString());
						}
						com.google.gson.JsonObject CDSelection = products
								.get("CDSelection") != null ? products.get(
								"CDSelection").getAsJsonObject() : null;
						if (CDSelection != null) {
							com.google.gson.JsonArray cdPlansArray = CDSelection
									.has("CDPlans") ? (CDSelection
									.get("CDPlans") != null ? CDSelection.get(
									"CDPlans").getAsJsonArray() : null) : null;
							if (cdPlansArray != null && cdPlansArray.size() > 0) {
								java.util.List<String> cdPlansList = new java.util.ArrayList<String>();
								cdPlansArray
										.forEach(cdItem -> {
											com.google.gson.JsonObject cdPlan = (com.google.gson.JsonObject) cdItem;
											String cdPlanStr = cdPlan
													.get("CDPlanId") != null
													? cdPlan.get("CDPlanId")
															.getAsString() : "";
											cdPlansList.add(cdPlanStr);
										});
								cdPlansMap.put(products.get("ProductRef")
										.getAsString(), cdPlansList);
							}
						}
					});
			kcontext.setVariable("cdPlans", cdPlansMap);
			kcontext.setVariable("productList", productListItems);
			kcontext.setVariable("productListforCreditCard",
					productListItemsforCreditCard);
		}

		// Funding
		if (appJson.get("Funding") != null) {
			com.google.gson.JsonObject fundingObj = appJson.get("Funding")
					.getAsJsonObject();

			// FundingStatus
			String fundingStatusValue = fundingObj.get("FundingStatus") != null
					? fundingObj.get("FundingStatus").getAsString()
					: "";
			kcontext.setVariable("fundingStatus", fundingStatusValue);

			// FundingType
			String fundingTypeValue = fundingObj.get("FundingType") != null
					? fundingObj.get("FundingType").getAsString()
					: "";
			kcontext.setVariable("fundingType", fundingTypeValue);

			// FundingProducts
			java.util.List<java.util.Map<String, String>> fundingProductsMap = new java.util.ArrayList<java.util.Map<String, String>>();
			com.google.gson.JsonArray fundingProductsArray = fundingObj
					.get("FundingProducts") != null ? fundingObj.get(
					"FundingProducts").getAsJsonArray() : null;
			if (fundingProductsArray != null) {
				fundingProductsArray
						.forEach(item -> {
							java.util.Map<String, String> fundingMap = new java.util.HashMap<String, String>();
							com.google.gson.JsonObject fundingEle = (com.google.gson.JsonObject) item;
							fundingMap.put("FundingProductId", fundingEle
									.get("FundingProductId") != null
									? fundingEle.get("FundingProductId")
											.getAsString() : "");
							fundingMap.put("FundingCDPlanId", fundingEle
									.get("FundingCDPlanId") != null
									? fundingEle.get("FundingCDPlanId")
											.getAsString() : "");
							fundingProductsMap.add(fundingMap);
						});
				kcontext.setVariable("fundingProducts", fundingProductsMap);
			}
		}
	}

	public static boolean isApplicationApproved(String applicationStatus) {
		return org.drools.core.util.KieFunctions.equalsTo(applicationStatus,
				"AutoApproved")
				|| org.drools.core.util.KieFunctions.equalsTo(
						applicationStatus, "Approved");
	}

	public static boolean checkProducts(
			org.kie.api.runtime.process.ProcessContext kcontext,
			Boolean isExistingCustomer) {
		java.util.Map<String, java.util.List<String>> cdPlansMap = (java.util.Map<String, java.util.List<String>>) kcontext
				.getVariable("cdPlans");
		java.util.List<String> productListItems = (java.util.List<String>) kcontext
				.getVariable("productList");
		java.util.List<String> productListItemsforCreditCard = (java.util.List<String>) kcontext
				.getVariable("productListforCreditCard");
		if (!isExistingCustomer && (productListItemsforCreditCard.size() > 0)
				&& (productListItems.size() == 0) && (cdPlansMap.size() == 0)) {
			return true;
		}
		return false;
	}

	public static boolean isUserActionApplicable(String bankReference) {
		return org.drools.core.util.KieFunctions
				.equalsTo(bankReference, "SFDC")
				&& org.drools.core.util.KieFunctions
						.equalsTo(
								System.getProperty("org.temenos.onboarding.skip.user.action"),
								"true");
	}

}